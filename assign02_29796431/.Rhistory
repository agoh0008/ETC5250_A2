log_prob_birdsongs <- log_probabilities$.pred_birdsongs
# Generate ROC curve for logistic model
roc_curve_logistic <- roc(finance_and_birds_tr$type == "birdsongs", log_prob_birdsongs)
# Calculate AUC for logistic model
auc_logistic_score <- round(auc(roc_curve_logistic), 3)
# Plot ROC curves for both models
plot(roc_curve_lda, col = "blue",
main = "ROC Curve - LDA vs Logistic Models (Train)",
xlab = "False Positive Rate",
ylab = "True Positive Rate")
plot(roc_curve_logistic, add = TRUE, col = "red")
# Add AUCs to the legend
legend("bottomright", legend = c(paste("LDA AUC =", auc_lda_score), paste("Logistic AUC =", auc_logistic_score)), col = c("blue", "red"), lty = 1, cex = 0.8)
# Chunk 35: fig-9
#| label: fig-9
#| fig-cap: This figure illustrates the ROC curves for both Linear Discriminant Analysis (LDA) and logistic regression models based on the test dataset. The ROC curve for LDA is depicted in blue, while the curve for logistic regression is shown in red. The area under the curve (AUC) values for both models are provided in the legend, highlighting their respective performances in distinguishing 'birdsongs' as the positive class.
# Calculate predicted probabilities for LDA model on the training set
lda_probabilities_ts <- predict(lda_fit$fit, finance_and_birds_ts, type = "prob")$posterior
# Extract probabilities for the positive class ("birdsongs")
lda_prob_birdsongs_ts <- lda_probabilities_ts[, "birdsongs"]
# Compute ROC curve for LDA model
roc_curve_lda_ts <- roc(finance_and_birds_ts$type == "birdsongs", lda_prob_birdsongs_ts)
# Calculate AUC for LDA model
auc_lda_score_ts <- round(auc(roc_curve_lda_ts), 3)
# Calculate predicted probabilities for logistic model on the training set
log_probabilities_ts <- predict(log_fit, type = "prob", new_data = finance_and_birds_ts)
# Extract predicted probabilities for the positive class ("birdsongs")
log_prob_birdsongs_ts <- log_probabilities_ts$.pred_birdsongs
# Generate ROC curve for logistic model
roc_curve_logistic_ts <- roc(finance_and_birds_ts$type == "birdsongs", log_prob_birdsongs_ts)
# Calculate AUC for logistic model
auc_logistic_score_ts <- round(auc(roc_curve_logistic_ts), 3)
# Plot ROC curves for both models
plot(roc_curve_lda_ts, col = "blue",
main = "ROC Curve - LDA vs Logistic Models (Test)",
xlab = "False Positive Rate",
ylab = "True Positive Rate")
plot(roc_curve_logistic_ts, add = TRUE, col = "red")
# Add AUCs to the legend
legend("bottomright", legend = c(paste("LDA AUC =", auc_lda_score_ts), paste("Logistic AUC =", auc_logistic_score_ts)), col = c("blue", "red"), lty = 1, cex = 0.8)
View(auswt20)
compute_PC2 <- function(data, index) {
pc2 <- prcomp(data[index,], center=TRUE, scale=TRUE)$rotation[,2]
if (sign(pc2[2]) < 0)
pc2 <- -pc2
return(pc2)
}
set.seed(201)
added_noise1 <- runif(54, -0.1, 0.1)
added_noise2 <- runif(54, -0.1, 0.1)
added_noise3 <- runif(54, -0.1, 0.1)
added_noise4 <- runif(54, -0.1, 0.1)
auswt20_adj <- auswt20 %>%
mutate(Hundreds = Hundreds + added_noise1,
Fifties = Fifties + added_noise2,
FourWickets = FourWickets + added_noise3,
FiveWickets = FiveWickets + added_noise4)
# Make sure sign of first PC element is positive
PC2_boot <- boot(data=auswt20_adj[,6:22], compute_PC2, R=1000)
colnames(PC2_boot$t) <- colnames(auswt20_adj[,6:22])
PC2_boot_ci <- as_tibble(PC2_boot$t) %>%
gather(var, coef) %>%
mutate(var = factor(var, levels=c("NotOuts", "Runs", "HighScore", "Average", "BallsFaced", "StrikeRate", "Hundreds", "Fifties", "Ducks", "Fours", "Sixes", "Overs", "Maidens", "Wickets", "Economy", "FourWickets", "FiveWickets"))) %>%
group_by(var) %>%
summarise(q2.5 = quantile(coef, 0.025),
q5 = median(coef),
q97.5 = quantile(coef, 0.975)) %>%
mutate(t0 = PC2_boot$t0)
compute_PC2 <- function(data, index) {
pc2 <- prcomp(data[index,], center=TRUE, scale=TRUE)$rotation[,2]
if (sign(pc2[1]) < 0)
pc2 <- -pc2
return(pc2)
}
set.seed(201)
added_noise1 <- runif(54, -0.1, 0.1)
added_noise2 <- runif(54, -0.1, 0.1)
added_noise3 <- runif(54, -0.1, 0.1)
added_noise4 <- runif(54, -0.1, 0.1)
auswt20_adj <- auswt20 %>%
mutate(Hundreds = Hundreds + added_noise1,
Fifties = Fifties + added_noise2,
FourWickets = FourWickets + added_noise3,
FiveWickets = FiveWickets + added_noise4)
# Make sure sign of first PC element is positive
PC2_boot <- boot(data=auswt20_adj[,6:22], compute_PC2, R=1000)
colnames(PC2_boot$t) <- colnames(auswt20_adj[,6:22])
PC2_boot_ci <- as_tibble(PC2_boot$t) %>%
gather(var, coef) %>%
mutate(var = factor(var, levels=c("NotOuts", "Runs", "HighScore", "Average", "BallsFaced", "StrikeRate", "Hundreds", "Fifties", "Ducks", "Fours", "Sixes", "Overs", "Maidens", "Wickets", "Economy", "FourWickets", "FiveWickets"))) %>%
group_by(var) %>%
summarise(q2.5 = quantile(coef, 0.025),
q5 = median(coef),
q97.5 = quantile(coef, 0.975)) %>%
mutate(t0 = PC2_boot$t0)
#| label: fig-2
#| fig-cap: Plot showing PC2 coefficients with confidence intervals.
ggplot(PC2_boot_ci, aes(x=var, y=t0)) +
geom_hline(yintercept=0, linetype=2, colour="red") +
geom_point() +
geom_errorbar(aes(ymin=q2.5, ymax=q97.5), width=0.3) +
xlab("") + ylab("Coefficient") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14)) +
labs(title = "PC2 Coefficients with Confidence Intervals")
compute_PC2 <- function(data, index) {
pc2 <- prcomp(data[index,], center=TRUE, scale=TRUE)$rotation[,2]
if (sign(pc2[12]) < 0)
pc2 <- -pc2
return(pc2)
}
set.seed(201)
added_noise1 <- runif(54, -0.1, 0.1)
added_noise2 <- runif(54, -0.1, 0.1)
added_noise3 <- runif(54, -0.1, 0.1)
added_noise4 <- runif(54, -0.1, 0.1)
auswt20_adj <- auswt20 %>%
mutate(Hundreds = Hundreds + added_noise1,
Fifties = Fifties + added_noise2,
FourWickets = FourWickets + added_noise3,
FiveWickets = FiveWickets + added_noise4)
# Make sure sign of first PC element is positive
PC2_boot <- boot(data=auswt20_adj[,6:22], compute_PC2, R=1000)
colnames(PC2_boot$t) <- colnames(auswt20_adj[,6:22])
PC2_boot_ci <- as_tibble(PC2_boot$t) %>%
gather(var, coef) %>%
mutate(var = factor(var, levels=c("NotOuts", "Runs", "HighScore", "Average", "BallsFaced", "StrikeRate", "Hundreds", "Fifties", "Ducks", "Fours", "Sixes", "Overs", "Maidens", "Wickets", "Economy", "FourWickets", "FiveWickets"))) %>%
group_by(var) %>%
summarise(q2.5 = quantile(coef, 0.025),
q5 = median(coef),
q97.5 = quantile(coef, 0.975)) %>%
mutate(t0 = PC2_boot$t0)
#| label: fig-2
#| fig-cap: Plot showing PC2 coefficients with confidence intervals.
ggplot(PC2_boot_ci, aes(x=var, y=t0)) +
geom_hline(yintercept=0, linetype=2, colour="red") +
geom_point() +
geom_errorbar(aes(ymin=q2.5, ymax=q97.5), width=0.3) +
xlab("") + ylab("Coefficient") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14)) +
labs(title = "PC2 Coefficients with Confidence Intervals")
compute_PC2 <- function(data, index) {
pc2 <- prcomp(data[index,], center=TRUE, scale=TRUE)$rotation[,2]
if (sign(pc2[12]) < 0)
pc2 <- -pc2
return(pc2)
}
set.seed(201)
added_noise1 <- runif(54, -0.1, 0.1)
added_noise2 <- runif(54, -0.1, 0.1)
added_noise3 <- runif(54, -0.1, 0.1)
added_noise4 <- runif(54, -0.1, 0.1)
auswt20_adj <- auswt20 %>%
mutate(Hundreds = Hundreds + added_noise1,
Fifties = Fifties + added_noise2,
FourWickets = FourWickets + added_noise3,
FiveWickets = FiveWickets + added_noise4)
# Make sure sign of first PC element is positive
PC2_boot <- boot(data=auswt20_adj[,6:22], compute_PC2, R=1000)
colnames(PC2_boot$t) <- colnames(auswt20_adj[,6:22])
PC2_boot_ci <- as_tibble(PC2_boot$t) %>%
gather(var, coef) %>%
mutate(var = factor(var, levels=c("NotOuts", "Runs", "HighScore", "Average", "BallsFaced", "StrikeRate", "Hundreds", "Fifties", "Ducks", "Fours", "Sixes", "Overs", "Maidens", "Wickets", "Economy", "FourWickets", "FiveWickets"))) %>%
group_by(var) %>%
summarise(q2.5 = quantile(coef, 0.025),
q5 = median(coef),
q97.5 = quantile(coef, 0.975)) %>%
mutate(t0 = PC2_boot$t0)
compute_PC2 <- function(data, index) {
pc2 <- prcomp(data[index,], center=TRUE, scale=TRUE)$rotation[,2]
if (sign(pc2[12]) < 0)
pc2 <- -pc2
return(pc2)
}
set.seed(201)
added_noise1 <- runif(54, -0.1, 0.1)
added_noise2 <- runif(54, -0.1, 0.1)
added_noise3 <- runif(54, -0.1, 0.1)
added_noise4 <- runif(54, -0.1, 0.1)
auswt20_adj <- auswt20 %>%
mutate(Hundreds = Hundreds + added_noise1,
Fifties = Fifties + added_noise2,
FourWickets = FourWickets + added_noise3,
FiveWickets = FiveWickets + added_noise4)
# Make sure sign of first PC element is positive
PC2_boot <- boot(data=auswt20_adj[,6:22], compute_PC2, R=1000)
colnames(PC2_boot$t) <- colnames(auswt20_adj[,6:22])
PC2_boot_ci <- as_tibble(PC2_boot$t) %>%
gather(var, coef) %>%
mutate(var = factor(var, levels=c("NotOuts", "Runs", "HighScore", "Average", "BallsFaced", "StrikeRate", "Hundreds", "Fifties", "Ducks", "Fours", "Sixes", "Overs", "Maidens", "Wickets", "Economy", "FourWickets", "FiveWickets"))) %>%
group_by(var) %>%
summarise(q2.5 = quantile(coef, 0.025),
q5 = median(coef),
q97.5 = quantile(coef, 0.975)) %>%
mutate(t0 = PC2_boot$t0)
#| label: fig-2
#| fig-cap: Plot showing PC2 coefficients with confidence intervals.
ggplot(PC2_boot_ci, aes(x=var, y=t0)) +
geom_hline(yintercept=0, linetype=2, colour="red") +
geom_point() +
geom_errorbar(aes(ymin=q2.5, ymax=q97.5), width=0.3) +
xlab("") + ylab("Coefficient") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14)) +
labs(title = "PC2 Coefficients with Confidence Intervals")
compute_PC2 <- function(data, index) {
pc2 <- prcomp(data[index,], center=TRUE, scale=TRUE)$rotation[,2]
if (sign(pc2[12]) < 0)
pc2 <- -pc2
return(pc2)
}
set.seed(201)
added_noise1 <- runif(54, -0.1, 0.1)
added_noise2 <- runif(54, -0.1, 0.1)
added_noise3 <- runif(54, -0.1, 0.1)
added_noise4 <- runif(54, -0.1, 0.1)
auswt20_adj <- auswt20 %>%
mutate(Hundreds = Hundreds + added_noise1,
Fifties = Fifties + added_noise2,
FourWickets = FourWickets + added_noise3,
FiveWickets = FiveWickets + added_noise4)
# Make sure sign of first PC element is positive
PC2_boot <- boot(data=auswt20_adj[,6:22], compute_PC2, R=1000)
colnames(PC2_boot$t) <- colnames(auswt20_adj[,6:22])
PC2_boot_ci <- as_tibble(PC2_boot$t) %>%
gather(var, coef) %>%
mutate(var = factor(var, levels=c("NotOuts", "Runs", "HighScore", "Average", "BallsFaced", "StrikeRate", "Hundreds", "Fifties", "Ducks", "Fours", "Sixes", "Overs", "Maidens", "Wickets", "Economy", "FourWickets", "FiveWickets"))) %>%
group_by(var) %>%
summarise(q2.5 = quantile(coef, 0.025),
q5 = median(coef),
q97.5 = quantile(coef, 0.975)) %>%
mutate(t0 = PC2_boot$t0)
#| label: fig-2
#| fig-cap: Plot showing PC2 coefficients with confidence intervals.
ggplot(PC2_boot_ci, aes(x=var, y=t0)) +
geom_hline(yintercept=0, linetype=2, colour="red") +
geom_point() +
geom_errorbar(aes(ymin=q2.5, ymax=q97.5), width=0.3) +
xlab("") + ylab("Coefficient") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14)) +
labs(title = "PC2 Coefficients with Confidence Intervals")
lhs
rhs
# Set up the PNG device for saving the plot
png("plot_output.png", width = 500, height = 500)
# Plot the points
plot(orange_points[,1], orange_points[,2], col = "orange", pch = 19, cex = 1,
xlim = c(-2, 2), ylim = c(0, 7),
xlab = "x1", ylab = "x2",
main = "Class Separation without using Logistic Regression or LDA",
cex.main = 1.3,
cex.lab = 1.5,
cex.axis = 1.5)
points(blue_points[,1], blue_points[,2], col = "blue", pch = 19, cex = 1)
legend("topright",
legend = c("Class A (Orange)", "Class B (Blue)"),
col = c("orange", "blue"),
pch = 19, cex = 1)
# Define coefficients of quadratic equation
a <- 0.5  # coefficient of x^2
b <- -1   # coefficient of x
c <- 2    # constant term
# Generate x values
x_values <- seq(-2, 2, length.out = 100)
# Calculate corresponding y values using the quadratic equation
y_values <- a * x_values^2 + b * x_values + c
# Plot the quadratic separation rule
lines(x_values, y_values, col = "red", lty = 2)
text(-2, 2, "Separation Rule: ax^2 + bx + c = 0", pos = 4, col = "red", cex = 1)
dev.off()
# Set up the PNG device for saving the plot
png("plot_output.png", width = 500, height = 500)
# Plot the points
plot(orange_points[,1], orange_points[,2], col = "orange", pch = 19, cex = 1,
xlim = c(-2, 2), ylim = c(0, 7),
xlab = "x1", ylab = "x2",
main = "Class Separation without using Logistic Regression or LDA",
cex.main = 1.3,
cex.lab = 1.5,
cex.axis = 1.5)
points(blue_points[,1], blue_points[,2], col = "blue", pch = 19, cex = 1)
legend("topright",
legend = c("Class A (Orange)", "Class B (Blue)"),
col = c("orange", "blue"),
pch = 19, cex = 1)
# Define coefficients of quadratic equation
a <- 0.5  # coefficient of x^2
b <- -1   # coefficient of x
c <- 2    # constant term
# Generate x values
x_values <- seq(-2, 2, length.out = 100)
# Calculate corresponding y values using the quadratic equation
y_values <- a * x_values^2 + b * x_values + c
# Plot the quadratic separation rule
lines(x_values, y_values, col = "red", lty = 2)
text(-2, 2, "Separation Rule: ax^2 + bx + c = 0", pos = 4, col = "red", cex = 1)
dev.off()
# Set up the PNG device for saving the plot
png("plot_output2.png", width = 500, height = 500)
# Plot the points
plot(orange_points[,1], orange_points[,2], col = "orange", pch = 19, cex = 1,
xlim = c(-2, 2), ylim = c(0, 7),
xlab = "x1", ylab = "x2",
main = "Class Separation without using Logistic Regression or LDA",
cex.main = 1.3,
cex.lab = 1.5,
cex.axis = 1.5)
points(blue_points[,1], blue_points[,2], col = "blue", pch = 19, cex = 1)
legend("topright",
legend = c("Class A (Orange)", "Class B (Blue)"),
col = c("orange", "blue"),
pch = 19, cex = 1)
# Define coefficients of quadratic equation
a <- 0.5  # coefficient of x^2
b <- -1   # coefficient of x
c <- 2    # constant term
# Generate x values
x_values <- seq(-2, 2, length.out = 100)
# Calculate corresponding y values using the quadratic equation
y_values <- a * x_values^2 + b * x_values + c
# Plot the quadratic separation rule
lines(x_values, y_values, col = "red", lty = 2)
text(-2, 2, "Separation Rule: ax^2 + bx + c = 0", pos = 4, col = "red", cex = 1)
dev.off()
# Set up the PNG device for saving the plot
png("plot_output2.png", width = 500, height = 500)
# Plot the points
plot(orange_points[,1], orange_points[,2], col = "orange", pch = 19, cex = 1,
xlim = c(-2, 2), ylim = c(0, 7),
xlab = "x1", ylab = "x2",
main = "Class Separation without using Logistic Regression or LDA",
cex.main = 1.3,
cex.lab = 1.5,
cex.axis = 1.5)
points(blue_points[,1], blue_points[,2], col = "blue", pch = 19, cex = 1)
legend("topright",
legend = c("Class A (Orange)", "Class B (Blue)"),
col = c("orange", "blue"),
pch = 19, cex = 1)
# Define coefficients of quadratic equation
a <- 0.5  # coefficient of x^2
b <- -1   # coefficient of x
c <- 2    # constant term
# Generate x values
x_values <- seq(-2, 2, length.out = 100)
# Calculate corresponding y values using the quadratic equation
y_values <- a * x_values^2 + b * x_values + c
# Plot the quadratic separation rule
lines(x_values, y_values, col = "red", lty = 2)
text(-2, 2, "Separation Rule: ax^2 + bx + c = 0", pos = 4, col = "red", cex = 1)
dev.off()
# Set up the PNG device for saving the plot
png("plot_output2.png", width = 500, height = 500)
# Plot the points
plot(orange_points[,1], orange_points[,2], col = "orange", pch = 19, cex = 1,
xlim = c(-2, 2), ylim = c(0, 7),
xlab = "x1", ylab = "x2",
main = "Class Separation without using Logistic Regression or LDA",
cex.main = 1.3,
cex.lab = 1.5,
cex.axis = 1.5)
points(blue_points[,1], blue_points[,2], col = "blue", pch = 19, cex = 1)
legend("topright",
legend = c("Class A (Orange)", "Class B (Blue)"),
col = c("orange", "blue"),
pch = 19, cex = 1)
# Define parameters for the quadratic equation
a <- 1     # determines the direction of opening (positive: upwards, negative: downwards)
b <- 0     # x-coordinate of the vertex
c <- 1.5   # y-coordinate of the vertex
# Generate x values
x_values <- seq(-2, 2, length.out = 100)
# Calculate corresponding y values using the quadratic equation
y_values <- a * (x_values - b)^2 + c
# Plot the quadratic separation rule
lines(x_values, y_values, col = "red", lty = 2)
text(-2, 2, "Quadratic Separation Rule: x2 = a(x1 - b)^2 + c", pos = 4, col = "red", cex = 1)
dev.off()
# Coordinates for Class A
orange_points <- matrix(c(-2, 4, -1, 1, 0, 0, 1, 1, 2, 4), ncol = 2, byrow = TRUE)
# Coordinates for Class B
blue_points <- matrix(c(-2, 6, -1, 3, 0, 2, 1, 3, 2, 6), ncol = 2, byrow = TRUE)
# Set up the PNG device for saving the plot
png("plot_output.png", width = 500, height = 500)
# Plot the points
plot(orange_points[,1], orange_points[,2], col = "orange", pch = 19, cex = 1,
xlim = c(-2, 2), ylim = c(0, 7),
xlab = "x1", ylab = "x2",
main = "Class Separation without using Logistic Regression or LDA",
cex.main = 1.3,
cex.lab = 1.5,
cex.axis = 1.5)
points(blue_points[,1], blue_points[,2], col = "blue", pch = 19, cex = 1)
legend("topright",
legend = c("Class A (Orange)", "Class B (Blue)"),
col = c("orange", "blue"),
pch = 19, cex = 1)
# Define parameters for the quadratic equation
a <- 1     # determines the direction of opening (positive: upwards, negative: downwards)
b <- 0     # x-coordinate of the vertex
c <- 1.5   # y-coordinate of the vertex
# Generate x values
x_values <- seq(-2, 2, length.out = 100)
# Calculate corresponding y values using the quadratic equation
y_values <- a * (x_values - b)^2 + c
# Plot the quadratic separation rule
lines(x_values, y_values, col = "red", lty = 2)
text(-2, 2, "Quadratic Separation Rule: x2 = a(x1 - b)^2 + c", pos = 4, col = "red", cex = 1)
dev.off()
# Coordinates for Class A
orange_points <- matrix(c(-2, 4, -1, 1, 0, 0, 1, 1, 2, 4), ncol = 2, byrow = TRUE)
# Coordinates for Class B
blue_points <- matrix(c(-2, 6, -1, 3, 0, 2, 1, 3, 2, 6), ncol = 2, byrow = TRUE)
# Set up the PNG device for saving the plot
png("plot_output.png", width = 500, height = 500)
# Plot the points
plot(orange_points[,1], orange_points[,2], col = "orange", pch = 19, cex = 1,
xlim = c(-2, 2), ylim = c(0, 7),
xlab = "x1", ylab = "x2",
main = "Class Separation without using Logistic Regression or LDA",
cex.main = 1.3,
cex.lab = 1.5,
cex.axis = 1.5)
points(blue_points[,1], blue_points[,2], col = "blue", pch = 19, cex = 1)
legend("topright",
legend = c("Class A (Orange)", "Class B (Blue)"),
col = c("orange", "blue"),
pch = 19, cex = 1)
# Define parameters for the quadratic equation
a <- 1     # determines the direction of opening (positive: upwards, negative: downwards)
b <- 0     # x-coordinate of the vertex
c <- 1.5   # y-coordinate of the vertex
# Generate x values
x_values <- seq(-2, 2, length.out = 100)
# Calculate corresponding y values using the quadratic equation
y_values <- a * (x_values - b)^2 + c
# Plot the quadratic separation rule
lines(x_values, y_values, col = "red", lty = 2)
text(-2, 2, "Quadratic Separation Rule: x2 = a(x1 - b)^2 + c", pos = 4, col = "red", cex = 1)
dev.off()
# Coordinates for Class A
orange_points <- matrix(c(-2, 4, -1, 1, 0, 0, 1, 1, 2, 4), ncol = 2, byrow = TRUE)
# Coordinates for Class B
blue_points <- matrix(c(-2, 6, -1, 3, 0, 2, 1, 3, 2, 6), ncol = 2, byrow = TRUE)
# Set up the PNG device for saving the plot
png("plot_output.png", width = 500, height = 500)
# Plot the points
plot(orange_points[,1], orange_points[,2], col = "orange", pch = 19, cex = 1,
xlim = c(-2, 2), ylim = c(0, 7),
xlab = "x1", ylab = "x2",
main = "Class Separation without using Logistic Regression or LDA",
cex.main = 1.3,
cex.lab = 1.5,
cex.axis = 1.5)
points(blue_points[,1], blue_points[,2], col = "blue", pch = 19, cex = 1)
legend("topright",
legend = c("Class A (Orange)", "Class B (Blue)"),
col = c("orange", "blue"),
pch = 19, cex = 1)
# Define parameters for the quadratic equation
a <- 1
b <- 0     # x-coordinate of the vertex
c <- 1.5   # y-coordinate of the vertex
# Generate x values
x_values <- seq(-2, 2, length.out = 100)
# Calculate corresponding y values using the quadratic equation
y_values <- a * (x_values - b)^2 + c
# Plot the quadratic separation rule
lines(x_values, y_values, col = "red", lty = 2)
text(-2, 1.5, "Quadratic Separation Rule: x2 = a(x1 - b)^2 + c", pos = 4, col = "red", cex = 1)
dev.off()
# Coordinates for Class A
orange_points <- matrix(c(-2, 4, -1, 1, 0, 0, 1, 1, 2, 4), ncol = 2, byrow = TRUE)
# Coordinates for Class B
blue_points <- matrix(c(-2, 6, -1, 3, 0, 2, 1, 3, 2, 6), ncol = 2, byrow = TRUE)
# Set up the PNG device for saving the plot
png("plot_output.png", width = 500, height = 500)
# Plot the points
plot(orange_points[,1], orange_points[,2], col = "orange", pch = 19, cex = 1,
xlim = c(-2, 2), ylim = c(0, 7),
xlab = "x1", ylab = "x2",
main = "Class Separation without using Logistic Regression or LDA",
cex.main = 1.3,
cex.lab = 1.5,
cex.axis = 1.5)
points(blue_points[,1], blue_points[,2], col = "blue", pch = 19, cex = 1)
legend("topright",
legend = c("Class A (Orange)", "Class B (Blue)"),
col = c("orange", "blue"),
pch = 19, cex = 1)
# Define parameters for the quadratic equation
a <- 1
b <- 0     # x-coordinate of the vertex
c <- 1.5   # y-coordinate of the vertex
# Generate x values
x_values <- seq(-2, 2, length.out = 100)
# Calculate corresponding y values using the quadratic equation
y_values <- a * (x_values - b)^2 + c
# Plot the quadratic separation rule
lines(x_values, y_values, col = "red", lty = 2)
text(-2, 1.3, "Quadratic Separation Rule: x2 = a(x1 - b)^2 + c", pos = 4, col = "red", cex = 1)
dev.off()
lfs
lhs
rhd
rhs
